{
  "ConfigUrl": [
    {
      "key": "_information",
      "completeAPI": "View all URL <a href='/api/#category_ConfigUrl'>API here</a>.",
      "description": "These options are defined in query url, and can configure tools and view settings.\nUsage (IN LINK URL): <a target='_blank' href='https://maps.csr.ufmg.br/editor/?lang=eng&map=&queryid=78&extent=&tools=helpintro,layerchooser,zoomextent,customzoom,getfeature,hovershowlegend&options=scale,startopened,hidestylechooser,enablequeries&visiblelayers=1000'>https://maps.csr.ufmg.br/editor/?lang=eng&map=&queryid=78&extent=&tools=helpintro,layerchooser,zoomextent,customzoom,getfeature,hovershowlegend&options=scale,startopened,hidestylechooser,enablequeries&visiblelayers=1000</a>",
      "name": "URL Parameters"
    },
    {
      "key": "tools=",
      "description": "Set the enabled map tools, these tools are shown in the top right side of the map viewer.\n\nhovershowlegend: Add a tool to shows map legends on hovering.\nlayerchooser: Add to 'legends viewer' a list of map layers. (Not affects 'calculate' maps).\nzoomextent: Add zoom to visible maps extents tool.\ngetfeature: Add GetFeatureInfo tool, a tool to click and get any pixel complete information.\nmeasure: Add a measurement tool that can measure a polygon area or a distance in a map.\nlegend: Add a floating panel to show the map legends.\nmetadata: Add a button to show all maps metadata.\nhelpintro: Show a button with help options, tutorial and step by step guide.\nUsage: URL/?tools=helpintro,layerchooser,zoomextent,customzoom,getfeature",
      "type": "{String}"
    },
    {
      "key": "options=",
      "description": "Set options for the elements in the map viewer.\n\nonlyfirstvisible: Only the first layer is initially visible.\nhidemetadata: Remove layers metadata button.\ndisabledownload: Remove layers 'Download' button.\nhidestylechooser: If defined remove the list of bands of layers. (Do not affect 'calculate' maps).\nscale: Show the scale indicator at bottom left of the map.\ngrid: Show grid tiles bounds.\noverview: Shows a small map to help user idenfity where globally is he viewing.\ncapabilities: Load capabilities only for the layers in query. Reduces drastically the loading speed.\nstartopened: Painel showing layers is initially opened. (Deprecated)\nonevisible: Only one layer is visible at any time. (Deprecated)\nUsage: URL/?options=enablequeries,scale,startopened",
      "type": "{String}"
    },
    {
      "key": "lang=",
      "description": "Select the interface language, which actually are: 'pt-br', 'eng'.\nUsage: URL/?lang=eng",
      "type": "{String}",
      "default": "pt-br"
    },
    {
      "key": "queryid=",
      "description": "Id of the Query content to load.\nUsage: URL/?queryid=57",
      "type": "{Numeric}",
      "default": ""
    },
    {
      "key": "extent=",
      "description": "If defined shows a given bounds defined in EPSG:4626|EPSG:900913 coordinate system, otherwise zoom to visible layers extents. The boundbox is defined as 'left, bottom,Right,top' coordinates.\nUsage: extent=-443.628,-16.847,-407.373,3.294",
      "type": "{String}"
    },
    {
      "key": "visibleLayers",
      "description": "Define the initially visible layers.\n\nvisibleLayers < 0 'lower than zero' : Shows the first defined maps as visible (From top to bottom).\nvisibleLayers > 0 'higher than zero': Shows the last defined maps as visible (From bottom to top).\nvisibleLayers = 0                   : Start with no layer visible.\nvisibleLayers = 'custom'            : Visibility defined in each map by 'visibility: {Boolean}' property.\nUsage: URL/?visibleLayers=custom",
      "type": "{Number|String}",
      "default": "100"
    }
  ],
  "GroupingMaps" : [
    {
      "key": "_information",
  "description": "Defines groups of {ConfigLayers}, each layer in the same group is shown under the same sub-menu. A group of layers is defined by an array of one Group definition followed by his inside layers declarations as: [{GroupingMaps{title, color}}, {ConfigLayer}, ...].\nGroupingMaps.title: {String} Title of the group of maps\nGroupingMaps.color: {String} RGB string content.\nUsage: [{title: \"Prodes Group\", color: \"#8F7C7C\"}, {name:'CSR:prodes', source:'local'}] ",
      "name": "Grouping maps"
    }
  ],
  "ConfigLayer": [
    {
      "key": "_information",
      "completeAPI": "View all layer configuration <a href='/api/#category_ConfigLayer'>API here</a>.",
      "description": "Configurable exhibition of each map, defining interactions, possible internal maps and applied calculations among them.",
      "name": "Layer properties configuration"
    },
    {
      "key": "paramsButtonConfig",
      "description": "Choose what custom buttons are shown on the layer representation.\n\nThere are multiple types of buttons, there are some commum properties and some special properties:\n\nCommom properties:\n{\n  iconCls: {String} The class to add on the button. Ex: \"icon-timeline-slider\"\n  pressed: {Boolean} True to indicate if the button starts pressed, False otherwise. Ex: true,\n  toggleGroup: {String} Identify a group by name where only one button of the group can be pressed. Ex: 'onlyOneAtTime'\n}\n\nTypes:\nassociated: {associatedButtonID: 'ANOTHER_BUTTON_ID', type: 'associated'}\n Treat the layer button and the associated as the same button, so no matter which one is clicked both will\n  receive the click event.\nquery: {type: 'query'}\n This configuration allows the user to change the default query button behavior overriting his definition.\ndownload: {type: 'download', layerIndex: 0}\n Set what layer should be downloaded when more than one layer is shown by its internal layer index.\nmetadata: {type: 'metadata', layerIndex: 0}\n Set the metadata button to show one of the inside composite layer by his index.\n\n\nPS: The layerIndex is from 0 to the quantity of layers in a composed map.\nPS2: The properties are aditional, so the common must always be present, and for each type his\n corresponding property must be added.\nUsage: paramsButtonConfig: {\n    associatedButtonID: \"population_2015_2036_timeline\",\n        iconCls: \"icon-timeline-slider\",\n        pressed: true,\n        toggleGroup: undefined\n}",
      "type": "{Object}"
    },
    {
      "key": "visibility",
      "description": "Define the layer as initial visibility, True to start visible False otherwise. (the URL parameter visibleLayers can override this value).\nUsage: {visibility: false}",
      "type": "{Boolean}",
      "default": "true"
    },
    {
      "key": "legendTitle",
      "description": "Defines a title for the map legend representation.\nUsage: {legendTitle: '(Ton/ha)'}",
      "type": "{String}",
      "default": "empty"
    },
    {
      "key": "hideLegendButton",
      "description": "Set the 'show legend' button visibility, True to hide button or False to keep it visible.\nUsage: {hideLegendButton:true}",
      "type": "{Boolean}",
      "default": "false"
    },
    {
      "key": "associatedButtonID",
      "description": "Defines a button to associate with the query button, so when click on one of these buttons the other receives the click too.\nUsage: paramsButtonConfig: [{\n associatedButtonID: \"precip_monthly_average_timeline\",\n iconCls: \"icon-timeline-slider\",\n pressed: true,\n type:\"query\",\n toggleGroup: undefined\n}]",
      "type": "{String}",
      "default": "undefined"
    },
    {
      "key": "source",
      "description": "Type of desired interaction with map, there are two possible types:\n 1) 'local': Maps without complex pixel actions.\n 2) 'calculate': Maps to interact with his values and use to create others maps.\nUsage: {source: 'calculate'}",
      "type": "{String}",
      "default": "undefined",
      "required": "true"
    },
    {
      "key": "name",
      "description": "One or more maps identifiers, each map have a unique name, and the name is a group  of identifiers separated by comma. Usage:\nOne map: 'CSR:protected_areas'.\nTwo Maps: 'CSR:protected_areas,CSR:altimetria'",
      "type": "{String}",
      "default": "undefined",
      "required": "true"
    },
    {
      "key": "title",
      "description": "Define map title, if empty the title is read from metadata.\nUsage: title: 'My 1ยบ Custom Title'",
      "type": "{String}",
      "default": "{String}"
    },
    {
      "key": "updateAutomatically",
      "description": "Flag to control the calculations delay after a widget update/change by user interaction.\n\n'True' to start calculations immediately and 'False' otherwise.\n\n*PS: Only applicable to 'calculate' maps.\nUsage: {updateAutomatically: true}",
      "type": "{Boolean}",
      "default": "false"
    },
    {
      "key": "visible",
      "description": "Defines initial map visibility, True to start visible, False otherwise.\nUsage: {visible: false}",
      "type": "{Boolean}",
      "default": "true"
    },
    {
      "key": "opacity",
      "description": "Defines initial map opacity.\nUsage: {opacity: 0.8}",
      "type": "{Numeric}",
      "default": "1"
    },
    {
      "key": "beforeCalc",
      "description": "Function called before each expression calculation.\nPs: Maps even without 'expression' function will call the 'beforeCalc' function on a input update.\nPs2: This function is called synchronously and the context is the map layer.\nUsage: beforeCalc: function(inputs){}",
      "type": "{Function}({{inputs}})",
      "default": "null"
    },
    {
      "key": "expression",
      "description": "Function to process each layer pixels to the resulting map.\n\n@param layersValue {Array} Array with the layers values, each layer in one position of the array.\n@param inputs {Object} Inputs defined to interact with the map.\n@return {*} Value of each processed pixel.\nUsage: { expression: function(layersVals, inputs) {return layersVals[0];} }",
      "type": "{Function}({{layersVals}}, {{inputs}})",
      "default": "null"
    },
    {
      "key": "functions",
      "description": " Allows to create custom functions on the context of each layer. These functions can be used in any tool callbacks, in the tool callback must use the same name in this 'functions' property.\n PS1: Functions only visible inside this layer.\n PS2: Functions accessed by tools callbacks using his property name as:  (this.functions.['onClick']) to refer the following onClick function:\n functions: {\n   onClick: function() {\n     ExtjsUtils.ALERTIFY.log(\"Clicked Button\");\n   }\n }",
      "type": "{Object}",
      "default": "null"
    },
    {
      "key": "group",
      "description": "Defines this layer as part of a group of exclusively visible, when one is shown all others will become hidden.",
      "type": "{String}",
      "default": "null"
    }
  ],
  "LayerInternal": [
    {
      "key": "_information",
      "completeAPI": "View all layer internal helper functions <a href='/api/#category_LayerInternal'>API here</a>.",
      "description": "Functions to manipulate a composed map layers from inside, like what maps are composing or what legend will be applied.",
      "name": "Layer internal functions"
    },
    {
      "key": "changeLayers",
      "description": "Change a internal layer in a given index by another.\n\nPS: Its highly recommended to pass multiple configuration in a array, avoid call this function multiple\n times in the same callback.\n@param newConfig {Array|Object} One or more layers configurations with a property 'index' indicating the replacing layer.\n Each config object must contain at least the following properties:\n  [{name: 'MAP_FULL_NAME', styles: 'MAP_STYLE', index: 'MAP_INDEX_TO_CHANGE'}, ... ]\n@param force {Boolean} Force redraw even if no change is done when the layer is the same.\nUsage: (layer.changeLayers({name:'CSR:estados', index:1} ))",
      "type": "{Array{Object} }",
      "default": "undefined"
    },
    {
      "key": "setCalculateLegend",
      "description": "Defines the current map legend, so it prevents from a new legends calculation process.\n\nPS: Can be called inside the 'beforeCalculate' callback, which is the time right before the new legend calculation.\nPS2: Can be called on a tool callback.\n\n@param legendEntries {Array{{String|Array{Number, Number, Number} }, {Object}, {String} } } Array with the legends sorted entries in ascending order, the ones out of order will be ignored.\nUsage: layer.setCalculateLegend([['00FF00', 10, 'lower Bound'], ['F100F3',50,'higher Bound']]);",
      "type": ["{Function}({{legendEntries}})"],
      "default": "undefined"
    }
  ],
  "Button": [
    {
      "key": "_information",
      "completeAPI": "This button is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.Button' target='_blank'>Button.Configs</a>.\nOnly some properties are listed in <a href='/api/#category_Button'>API here</a>.",
      "description": "Create a simple button to user interact with the map.",
      "name": "Button widget"
    },
    {
      "key": "handler",
      "description": "{{Function}} called when the button is clicked. \n{{Component}}: This button.\n{{EventObject}}: The click event.\nUsage: |handler=function() {alert('btn clicked');}|",
      "type": ["{Function}({Component}, {EventObject})"],
      "default": "null"
    },
    {
      "key": "toggleHandler",
      "description": "Function called when a Button with {enableToggle} set to true is clicked. \n{{Component}}: This button.\n{{EventObject}}: The click event.\nUsage: |toggleHandler=function(c,e) {alert('Btn pressed ' + e);}",
      "type": ["{Function}({{Component}}, {{EventObject}})"],
      "default": "null"
    },
    {
      "key": "enableToggle",
      "description": "{{Function}} called when the button is clicked. \n{Component}: This button.\n{EventObject}: The click event.\nUsage: |enableToggle=true|",
      "type": ["{Boolean}"],
      "default": "false"
    }
  ],
  "Combobox": [
    {
      "key": "_information",
      "completeAPI": "This button is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.form.ComboBox' target='_blank'>Ext.form.ComboBox</a> for customized properties click on <a href='/api/#category_Combobox'>API here</a>.",
      "description": "It creates an input of ComboBox tool where the value is selectable from a list.\nUsage: '\\{\\combobox\\}\\}' or <a href='/elements/combobox-widget/'>examples</a>.",
      "name": "Combobox widget"
    },
    {
      "key": "onSelect",
      "description": "Fires when a list item is selected. \n@param element {Element} This combobox.\n@param value {Record}: The record which was selected.\n@param index {Numeric} Index of the selected item.\n\nUsage: |onSelect= function(e,v) {alert('Selected ' + v);}|",
      "type": ["{Function}({{element}}, {{value}}, {{index}})\n"],
      "default": "undefined"
    },
    {
      "key": "width",
      "description": "Define element initial width in pixels.\nUsage: |width=200|",
      "type": ["{Number}"],
      "default": "190"
    }
  ],
  "LegendHtml": [
    {
      "key": "_information",
      "description": "Creates a DOM element with the map legend contents.\nUsage: '\\{\\{legendhtml\\}\\}'",
      "name": "Legend HTML"
    }
  ],
  "Hoverpixel": [
    {
      "key": "_information",
      "completeAPI": "View the complete HoverPixel <a href='/api/#category_Hoverpixel'>API here</a>.",
      "description": "Create a tool to instantly inspect pixel under mouse. The value of the map can also be used as input for another functions.\nUsage: \\{\\{hoverpixel\\}\\}",
      "name": "HoverPixel tool"
    },
    {
      "key": "runOnClick",
      "description": "Fires when a pixel is clicked.  CallBack parameters (layer, layersValue, inputs, coordinates, clickEvt, lastInfo)                       \n layer: {Layer} Current layer.                                                                           \n layersValue: {Array} One value for each layer at the given point.                                       \n inputs: {Object} Object with all the layer inputs.                                                      \n coordinates: {Openlayers.LatLon} Coordinate of the click in the map.                                    \n clickEvt: {EventObject} Mouse click event.                                                              \n lastInfo: {click: {LatLon}, hover: {LatLon} } A object with the last click and hover latLon positions.\nUsage: onClick=function(){alert('i found a click')}  ",
      "type": ["{Function}({{layer}}, {{layersValue}}, {{inputs}}, {{coordinates}}, {{clickEvt}}, {{lastInfo}}"],
      "default": "undefined"
    },
    {
      "key": "runOnHover",
      "description": "Fires when is hovering a pixel.  CallBack parameters (layer, layersValue, inputs, coordinates, clickEvt, lastInfo)                       \n layer: {Layer} Current layer.                                                                           \n layersValue: {Array} One value for each layer at the given point.                                       \n inputs: {Object} Object with all the layer inputs.                                                      \n coordinates: {Openlayers.LatLon} Coordinate of the click in the map.                                    \n clickEvt: {EventObject} Mouse click event.                                                              \n lastInfo: {click: {LatLon}, hover: {LatLon} } A object with the last click and hover latLon positions.\nUsage: onClick=function(){alert('i found a click')}  ",
      "type": ["{Function}({{layer}}, {{layersValue}}, {{inputs}}, {{coordinates}}, {{clickEvt}}, {{lastInfo}}"],
      "default": "undefined"
    }
  ],
  "TooltipHelper": [
    {
      "key": "_information",
      "completeAPI": "View the complete TooltipHelper <a href='/api/#category_TooltipHelper'>API here</a>.",
      "description": "Functions to create tooltips on elements, at fixed positions and at mouse events.\nUsage: ExtjsUtils.TooltipHelper",
      "name": "Tooltip helper"
    },
    {
      "key": "CreateTooltipThumb",
      "description": "Create a tooltip which follows the mouse on hovering an element with title, description and thumbnail.\n\nPS: The description content is shown until three break lines in sequence and the rest of the content is thrown away.\n\n@param title {String} Tooltip title.\n@param description {String} Tooltip content.\n@param target {DOM} DOM object to create the tooltip.\n@param thumbUrl {String} URL of the thumbnail.\n@param showDelay {Numeric} Define how many seconds until hide the tooltip.\n@returns {Ext.ToolTip} Created tooltip with the properties.\nUsage: ExtjsUtils.TooltipHelper.CreateTooltipThumb()",
      "type": ["({{title}}, {{description}}, {{target}}, {{thumbUrl}}, {{showDelay}})"]
    },
    {
      "key": "CreateTooltipOnPosition",
      "description": "Create a tooltip at a fixed position.\n\nIf the position is the mouse event, the tooltip will be at the right side and below the pointer.\nIf the position is a array[x,y] will anchor the top left at this point.\n\n@param title {String} Tooltip title.\n@param contentHtml {String} Tooltip HTML content.\n@param position {Event|Array[Number, Number]}} Defines the top left position of the tooltip.\n@param additionalConfig {Object} Additional configuration for the tooltip.\n@returns {Ext.Tooltip} A tooltip anchored at the given position.\nUsage: ExtjsUtils.TooltipHelper.CreateTooltipOnPosition('title', 'My <span>tooltip</span> content', [0, 0])",
      "type": ["({{title}}, {{contentHtml}}, {{position}}, {{additionalConfig}})"]
    }
  ],
  "Extjs": [
    {
      "key": "_information",
      "completeAPI": "View the full <a target='_blank' href=\"https://docs.sencha.com/extjs/3.4.0\">Extjs API 3.4 click here</a>.\n*Only the functions which where used in CSR projects are listed <a href='/api/#category_Extjs'>here</a>.",
      "description": "Calling core Extjs functions allows fine control over the CSRMaps internal elements.",
      "name": "Extjs 3.4"
    },
    {
      "key": "getCmp",
      "description": "Get a Extjs object by his ID.\n{{objId}}: The Id which object will be returned.\nUsage: Ext.getCmp('myId');",
      "type": ["({{objId}}) => {Ext.Component}"]
    },
    {
      "key": "getId",
      "description": "Returns the id of this component or automatically generates and returns an id if not defined yet <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.Component-method-getId' target='_blank'> view detailed documentation Ext.Component.getId()</a>.\nUsage: Ext.Component.getId()",
      "type": ["() => {String}"]
    }
  ],
  "Alertify": [
    {
      "key": "_information",
      "completeAPI": "View the complete Alertify <a href='/api/#category_Alertify'>API here</a>.",
      "description": "Functions to help showing dialog informations to users.",
      "name": "Alertify dialogs"
    },
    {
      "key": "log",
      "description": "Shows an user notification (if enabled).\n\nPS: The messages before layer loading are delayed, when it finishes only the last message will be shown.\n\n@param msg {String} Notification HTML content.\n@param config {Object} Message configuration parameters.\n {force: {Boolean} Force to show notification even when disabled.\n  func: {Callback} Callback function when the notification is clicked.\n  onlyMsg: {Boolean} True to only show message and hide the close and the stop notifications, False otherwise.\n }\nUsage: ExtjsUtils.ALERTIFY.log('test msg', {force:true})",
      "type": ["{Function}({{msg}},{{config}})"]
    }
  ],
  "InputManager": [
    {
      "key": "_information",
      "completeAPI": "View the complete InputManager <a href='/api/#category_InputManager'>API here</a>.",
      "description": "Tool to store local variables to be used in others functions callbacks.\nPS: DOM elements cannot be used in 'expression' context, because them cannot be sent to WebWorkers (javascript language limitation).\nUsage: '\\{\\{inputmanager\\}\\}'",
      "name": "InputManager tool"
    },
    {
      "key": "getValue",
      "description": "Get the stored value by his property name, if it does not exists returns null.\n\n@param key {String} Stored property name.\n@returns {*} Desired stored property when it exists or null otherwise.\nUsage: (inputs.id['id'].getValue('name'))",
      "type": ["({String}) => {Object}"]
    },
    {
      "key": "forceRecalc",
      "description": "Force a legend map recalculation.\nUsage: (inputs.id['id'].forceRecalc())",
      "type": ["()"]
    },
    {
      "key": "setValues",
      "description": "Stores object properties for later usage.\n\nPS: If has name property collision the older is replaced.\n@param obj {Object} Object with the properties to be stored.\n@param cancelUpdate {Boolean} False if this change must cause layer recalculation, True otherwise.\n@param local {Boolean} True to store the property locally, False otherwise. The local properties aren't sent to 'expression' calbacks. (i.e. If a element is recursive or have DOM elements, it must local avoid stringify errors on 'expression' callbacks)\nUsage: (inputs.id['id'].setValues({toStore:5}, ))('name'))",
      "type": ["({{obj}}, {{cancelUpdate}}, {{local}})"]
    }
  ],
  "RawMaps": [
    {
      "key": "_information",
      "completeAPI": "View the complete Raw Maps <a href='/api/#category_RawMaps'>API here</a>.",
      "description": "The Raw Maps are some maps that are sent with each pixel value and not a RGBA color. All the manipulations are at most with integer or float precision so the colors must be applied on the client, after some calculation to, on the client, create each cell color value.",
      "name": "Web Raw Maps"
    },
    {
      "key": "operation",
      "description": "A string that describe the RAW MAPS operations, each operation identifier da must be separated by a comma.\nPS: The operations must be one for each defined map.\n\nRaw Maps operations:\n\n'normal' (NORMAL): A normal map is a map with each cell representing a legend/color and aren't a RAW Maps type.\n'raw' (RAW): Each cell in resulting map has the value of ther most centered cell in aggregated region.\n'rgba' (RGBA): Each cell in resulting map has a integer value representing the RGBA composition.\n  PS: Tanto o resultado como o input sรฃo inteiros representando valores RGBA.\n'sum' (SUM): Each resulting cell is the weighted sum of cells in the covering region.\n  PS: The weight used is the proportion of the covered area against the total area of the cell i.e. VALUE * COVERED_PERCENTAGE.\n'average' (AVERAGE): Each cell is the resulting of the weighted mean of cell in the covered region.\n  i.e. Sum(A) / Sum(B) : A is CELL_VALUE * COVERED_PROPORTION, B is COVERED_PROPORTION.\n  Example: A full covered cell the COVERED_PROPORTION is 1, and the half covered cell the proportion is 0.5 .\n'max' (MAX): Each resulting cell is the greater cell that is at least partially covered in the given region.\n'min' (MIN): Each resulting cell is the smaller cell that is at least partially covered in the given region.\n'integral' (INTEGRAL): A technique that allows to calculate the sum in a region just inspecting the cells on the\n  boundaries of a retangular area i.e. calculate sum in a region using only 4 points.\n'areaintegral' (AREAINTEGRAL): ?\n'area' (AREA): Each cell carry the original map area in the aggregated region.\n  ?PS: Esse simplificador agrupa as รกreas do mapa original e permite avialiar a รกrea do mapa minimizando erros de\n   calculos de รกrea causados pela reprojeรงรฃo uma vez q a prรณpria cรฉlula armazena esse valor.\n'cells' (CELLS): Weighted sum of the cell quantity in a given region.\nExemplo: 'min,max,raw,integral'",
      "type": ["{String})"]
    },
    {
      "key": "styles",
      "description": "A string that describes the index/attribute of each map will be used. The style quantity must be the same of maps defined in query.\nUsage: '1,1,1,1'",
      "type": ["String"]
    }
  ],
  "QUERY": [
    {
      "key": "_information",
      "completeAPI": "View the complete Query <a href='/api/#category_QUERY'>API here</a>.",
      "description": "Defines a set of query helper functions.",
      "name": "Query utils"
    },
    {
      "key": "runOnceLayerVisible",
      "description": "A function that assure that a function will be called only when the layers is/became visible.\nlayer: {Openlayers.Layer} A reference to the map layer.\ncallback: {Function} A function that will be called instantly if the layer is already visible, or when the layer became visible.\nUsage: ExtjsUtils.QUERY.runOnceLayerVisible(this, function(){alert('Layer Visible.')}); ",
      "type": ["({{layer}}, {{callback}})"]
    },
    {
      "key": "setQueryGlobalProperties",
      "description": "A function that allows to define custom global functions that can be used in order to define properties or even inside the functions callbacks. \nglobalProperties: {Object} The object that all his functions will became globals, each property can be a value or a object or evan a function.\nPS: All properties defined here are added to the global scope and are removed when the query is changed.\n@param QUERY_DESCRIPTION {Array{ConfigLayer} } Array of layers in the query.\nUsage: ExtjsUtils.QUERY.setQueryGlobalProperties({globalCount: 0}) && QUERY_DESCRIPTION",
      "type": ["{Function}({{globalProperties}}) && {{QUERY_DESCRIPTION}}"]
    }
  ],
  "LegendHtml": [
    {
      "key": "_information",
      "description": "Create a tool with the map legends at any place of the query description.\nUsage: '\\{\\{legendhtml\\}\\}'",
      "name": "Map Legend HTML"
    }
  ],
  "OpacitySlider": [
    {
      "key": "_information",
      "description": "Create a tool to select the map opacity slider.\nUsage: '\\{\\{opacityslider\\}\\}'",
      "name": "Opacity slider tool"
    }
  ],
  "LoadCsv": [
    {
      "key": "_information",
      "completeAPI": "View the complete LoadCSV <a href='/api/#category_LoadCsv'>API here</a>.",
      "description": "Describes the API to read and manipulate ExtjsUtils.CSV.CsvTable files from URL.",
      "name": "Csv manager tool"
    },
    {
      "key": "getValue",
      "description": "Get a value by the matrix index and column.\n@param column {Number} Column index (First index is 0).\n@param line {Number} Line index (First index is 0).\n@return {String} Get the cell value.\nUsage: inputs.id['loadjson'](0,0)",
      "type": ["{Function}({{column}}, {{line}}) => {String}"]
    },
    {
      "key": "columnNameToInd",
      "description": "Get the index of a column with the 'columnName' name.\n@param columnName {String} Column name to search for.\n@return {Number} When it exists returns the column index, otherwise -1.\nUsage: inputs.id['loadjson']('total_ha')",
      "type": ["{Function}({{columnName}}) => {Numeric}"]
    },
    {
      "key": "setValue",
      "description": "Change a cell value by its cell index.\n\n@param column {Numeric} Column index.\n@param line {Numeric} Line index to change (ignore the header information when it exists).\n@param value {*} New value to replace the older value.\nUsage: inputs.id['loadjson'].setValue(2,2, 'myValue')",
      "type": ["{function}({{column}}, {{line}}, {{value}}) "]
    },
    {
      "key": "getLines",
      "description": "Get all lines that 'column' has the value equals to 'value'.\n\nPS: To use the 'column' as index, it must be numeric, when the 'column' is a text the index is searched on header by its name.\nPS: To filter multiple column each value and index one must be added to the 'columns' and 'values' arrays.\nEx: ([1,4,2], [\"FIRST_COLUMN_VALUE\",\"FORTH_COLUMN_VALUE\", SECOND_COLUMN_VALUE])\n\n@param columns {Array} (Optional) Array of indexes/names of the filtered columns.\n@param values {Array} {Opcional) Array of values to match each column.\n@returns {Array} If the parameters 'column' and 'value' aren't defined return all lines, otherwise returns only the matched lines.\nUsage: (inputs.id['id'].getLines([1,2,4], [20, 'blue', false], false);)",
      "type": ["{Function}({{columns}}, {{values}}, {{includeHeader}})"]
    }
  ],
  "Slider": [
    {
      "key": "_information",
      "completeAPI": "View the complete Slider <a href='/api/#category_Slider'>API here</a>.",
      "description": "Tool that allows users to create a slider that the user can drag and change its value as map input.",
      "name": "Slider tool"
    },
    {
      "key": "plugins.tip",
      "description": "Shows a tooltip with any html content with the value while dragging.\nUsage: |plugins=tip=Filter {0}% of total cells|",
      "type": ["{String}"]
    },
    {
      "key": "minValue",
      "description": "Defines the minimum acceptable value to slider.\nUsage: |minValue=0|",
      "type": ["{Numeric}"]
    },
    {
      "key": "maxValue",
      "description": "Defines the maximum acceptable value to slider.\nUsage: |maxValue=0|",
      "type": ["{Numeric}"]
    },
    {
      "key": "value",
      "description": "Defines the initial value to slider with only one thumb.\nUsage: |value=0|",
      "type": ["{Numeric}"]
    },
    {
      "key": "values",
      "description": "Property to use two or more thumbs, each value is the initial thumb value\n@type {Array} Array of initial values.\nUsage: |values=[0,100]|",
      "type": ["{Array}"]
    },
    {
      "key": "backgroundColors",
      "description": "Array of colors of background slider values, to define background slider color based in slider value.\nThe values are defined from most to minimum with two properties each:\n  - color: {String} CSS color definition for the current interval. i.e. 'red','black','#FF0000', '#000000'.\n  - startValue: {Numeric} If defined define the initial value which above will apply this color, otherwise use theminimum slider value as default.\n\nEx.:\n backgroundColors: [\n     {\n         // Define background color to red when slider has value above 75.\n         color: \"red\",\n         startValue: 75\n     },\n     {\n         // Define background color starting from value 0.\n         // That results two intervals, from 0 to 75 as blue, and from 76 to 100 as red.\n         color: \"blue\",\n         startValue: 0\n     }\n ]\nUsage: |backgroundColors=[{color:'red',startValue:75},{color:'blue'}]|",
      "type": ["{Array}"]
    }
  ],
  "Textfield": [
    {
      "key": "_information",
      "completeAPI": "This tool is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.form.TextField' target='_blank'>Ext.form,TextField</a>.\nOnly customized properties are <a href='/api/#category_Textfield'>listed here</a>.",
      "description": "TextField is a tool that allows editing of a single line of text.\nUsage:  '\\{\\{textfield\\}\\}'",
      "name": "Textfield tool"
    },
    {
      "key": "value",
      "description": "Set the initial tool content.\nUsage: |value=text|",
      "type": ["{String}"]
    },
    {
      "key": "isnumeric",
      "description": "Assures that the text content is a numeric string.\nUsage: |isnumeric|",
      "type": ["{String}"]
    },
    {
      "key": "fieldLabel",
      "description": "Field description.\nUsage: |fieldLabel=Field description.|",
      "type": ["{String}"]
    },
    {
      "key": "style",
      "description": "Element style description.\nUsage: |style=color:black;|",
      "type": ["{String}"]
    }
  ],
  "Label": [
    {
      "key": "_information",
      "completeAPI": "This label is created from <a href='https://docs.sencha.com/extjs/3.4.0/#!/api/Ext.form.Label' target='_blank'>Ext.form.Label</a>.\nOnly some properties are <a href='/api/#category_Label'>listed here</a>.",
      "description": "Create a simple label element to display some text.\nUsage: \\{\\{label|\\}\\}",
      "name": "Label element tool 'label'"
    },
    {
      "key": "text",
      "description": "The label text content.\nUsage: |text=content|",
      "type": ["{String}"]
    }
  ],
  "HTML": [
    {
      "key": "_information",
      "completeAPI": "",
      "description": "Any HTML is possible to be added to the layer description.",
      "name": "HTML contents"
    }
  ],
  "LoadJson": [
    {
      "key": "_information",
      "completeAPI": "",
      "description": "Tool to load a remote JSON and use it with map, this object can store string, values and functions.\nUsage: \\{\\{loadjson\\}\\}",
      "name": "LoadJson tool"
    }
  ],
  "PickPoint": [
    {
      "key": "_information",
      "completeAPI": "View the complete PickPoint <a href='/api/#category_PickPoint'>API here</a>",
      "description": "Creates an input that allows users to interact with the real cell or feature value at any position.\n\nThe returned values are from the original mal to the selected point,\n in case of RASTER is returned a cell value, in case of shapefile the geometry is returned too.\nUsage: \\{\\{pickpoint\\}\\}",
      "name": "PickPoint tool"
    },
    {
      "key": "text",
      "description": "Text associated with the pickpoint activation button.\nUsage: |text: 'Descibe pickpoint action'|",
      "type": ["{String}"]
    },
    {
      "key": "markLayerInd",
      "description": "Set the index of the internal layer to be drawn when a region is selected.\nUsage: |markLayerInd=1|",
      "type": ["{Numeric}"]
    },
    {
      "key": "lat",
      "description": "Initial latitude of the pickpoint pointer.\nUsage: |lat=10|",
      "type": ["{Numeric}"]
    },
    {
      "key": "lon",
      "description": "Initial longitude of the pickpoint pointer.\nUsage: |lon=10|",
      "type": ["{Numeric}"]
    }
  ],
  "Timeline": [
    {
      "key": "_information",
      "completeAPI": "View the complete Timeline <a href='/api/#category_Timeline'>API here</a>.",
      "description": "Creates a timeline with maps in a sequence which changes at a given interval.\nUsage: '\\{\\{timeline\\}\\}'",
      "name": "Timeline tool"
    },
    {
      "key": "nextStepInterval",
      "description": "Sets the delay in seconds between steps when timeline is playing.\nUsage: |nextStepInterval={Numeric}|",
      "type": ["{Numeric}"]
    },
    {
      "key": "steps",
      "description": "Array of all timeline steps where each element is a tuple of [VALUE,'Title']. The value is a mandatory parameter for the step, the title give a optional custom representation to value.\n Usage: |steps=[[1918, 'World War 1'], [1939, 'World War 2']]|",
      "type": ["{Array{Array} }"]
    }
  ],
  "AsyncLoader": [
    {
      "key": "_information",
      "completeAPI": "",
      "description": "Load one or more external resources by its URL and call a callback function when it finishes.\narray: {Array} A array of resource urls to load.\ncallback: Function that will be called when the load ends.\nUsage: AsyncLoader.loadScriptOnce({Array}, {Function}}",
      "name": "Asynchronous resource loader"
    }
  ],
  "Highcharts" : [
    {
      "key": "_information",
      "completeAPI": "Highcharts JS has a complete set of examples and a nice documentation that can be <a target='_blank' href='https://www.highcharts.com/demo'>accessed here</a>.",
      "description": "Highcharts is a library used to easly create interactive charts.\nUsage: (Highcharts.chart(DOM_ID, {});)",
      "name": "Highcharts library"
    }
  ],
  "QGIS": [
    {
      "key": "_information",
      "description": "The style can be defined in QGIS and the automatic publication process will create the same looking style from the style file.",
      "name": "QGIS stylization"
    }
  ],
  "Sankey": [
    {
      "key": "_information",
      "description": "Soon.",
      "name": "Sankey transitions chart"
    }
  ],
  "SummedArea": [
    {
      "key": "_information",
      "completeAPI": "View the complete SummedArea <a href='/api/#category_Slider'>API here</a>.",
      "description": "Create an input of summatory in any arbitrary area.\n\nCallBack parameters (context {OpenLayers.Layer}, layersValues {Array[Number]}, inputs {[Object]}, feature {Geometry})\nrunOnClick {Function}  Callback called exactly after sum the map region.,\n\nPS: 'layersValues' return the sum of each internal layer and an adittional value which is the sum of all pixels of resulting layer.",
      "name": "Summed Area tool"
    },
    {
      "key": "value",
      "description": "Initial latitude of the pickpoint pointer.\nUsage: |lat=10|",
      "type": ["{Numeric}"]
    }
  ]
}
